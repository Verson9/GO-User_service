// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RTwW7bOBD9lcHsHnYBQ3Z2c6luaQK0TpsmaOJTkAMtjiymEskMR3aMQP9ekIpdyU6B",
	"Fr1IBDnzZt7Mey9YuMY7S1YC5i8YiooalY6LQBz/np0nFkPp1uj4pWfV+JowP52gbD1hjsYKrYixm6BX",
	"IWwcjyP3tye4zwnCxq5SCpu1qWnVF9knzd6CbwOxVQ2N4S9dZeG2MVId43cTZHpqDZPG/D5yGKAM+h31",
	"8bCHcctHKgS7iGNs6WJhTaFg48U4iznepi7gzJtY3EjqaHd5M8cJrolDHzvLTrJ3kYfzZJU3mOP/2Syb",
	"pUakSgOYxu7SaUVyXO46HVQN9CxkNWkYvIOxcO6axtkrxd/AMXy8u/qcYSrIKobMNeb4gWSRqsThBO9s",
	"6If/32wWf4WzQjYVV97XpkiZ08cQO9gJJSlCqEmJR0t9vVDMattPb0zjDC5vr79AegdXQiQNcSchrSy0",
	"TaN4izl+JWnZBlBQmyC70KCXWdKOC6nNMb0bFwb8nloK8t7p7W9R+5upxBz/mv4wyfTVIdNkj24sLeGW",
	"uqNxnhwv8JxJCekDmv1tpBnpZem1V8L0ZSfXbiCKt/e5GAqbVUOSpHR/2MMubj95qZTAhmCjrIA4KEmK",
	"KurG2GTf5KzeeEP3jOlPBuM7dOHDHyrt19ZxYJVPUSKnfaXx011FEDwVpjSk+xHML8AEMHataqPhH+sE",
	"FNi2WRL/m/VAp8dAZ33yxkgFMgKdX8BGBYg4pWutThiaStXWb9h6YenZUyGkgZgd/9QFqdxyC/OLrOcc",
	"iNe7LbdcY45T7B667wEAAP//zUi6Pt4FAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
